
grammar TriggerDefinition
   
   rule define
     'define trigger ' space? name:string space?
     disabled:disabled? space?
     sev:severity? space?
     id:id? space? conditions space? act:action?
     ae:auto_enable? space? ad:auto_disable? space?
     <DefineNode>
   end
   
   rule disabled
     'disabled'
   end

   rule auto_disable
     'auto-disable'
   end

   rule auto_enable
     'auto-enable'
   end

   rule severity
     'severity ' space? sev:( 'LOW' / 'HIGH' / 'MEDIUM')
      {
        def value(_env)
          sev.text_value
        end
      }
   end


   rule id
     'id' space? id:string space+
     {
       def value(_env)
         id.value _env
       end
     }
   end

  rule conditions
    conds:(and_cond / or_cond / condition)  <ConditionsNode>
end

  rule and_cond
    'AND(' space? first:condition more:( space condition )* space? ')' <AndConditionNode>
  end

  rule or_cond
    'OR(' space? first:condition more:( space condition )* space? ')' <OrConditionNode>
  end

   rule condition
     '(' space? mode:( threshold / compare / availability / stringcond ) space? ')' <ConditionNode>
   end

   rule threshold
     'threshold ' space? mt:type? space? metric:string space? comp:( '>' / '=' / '<' / '<=' / '>=' / '<>' ) space? ref:number
     <ThresholdNode>
   end

   rule compare
     'compare ' space? mt:type? space? metric:string space? comp:( '>' / '=' / '<' / '<=' / '>=' / '<>' ) space? ref:number space? '%' space? mt2:type? space? metric2:string
     <CompareNode>
   end

   rule availability
     'availability ' space* metric:string space+ 'is' space+ ref:( 'UP' / 'DOWN' / 'NOT_UP' ) space?
     <AvailabilityNode>
   end


   rule stringcond
     'string ' space* metric:string space+ comp:('equals' / 'notEquals' / 'startsWith' / 'endsWith' / 'contains' / 'matches') space+ ref:string
     <StringConditionNode>
   end


   rule action
     act:( email ) <ActionNode>
   end

   rule email
     'send email to ' space? rec:string <EmailNode>
   end

  rule number
    ( float / integer)
  end

  rule type
     ( 'gauge rate' / 'gauge' / 'counter rate' / 'counter' ) <MetricTypeNode>
   end


   rule string
     '"' ([^"\\] / "\\" . )* '"'
     {
       def value(_env=nil)
         elements[1].text_value
       end
     }
   end

   rule boolean
    value:( 'true' / 'false' )
   end

   rule space
     [\s\n\t\r]+
   end

  rule chars
     [a-zA-Z]+
    {
      def value
        elements[0].text_value
      end
    }
  end

  rule float
    ('+' / '-')? [0-9]+ (('.' [0-9]+) / ('e' [0-9]+))  <FloatLiteral>
  end

  rule integer
    ( '+' / '-')? [0-9]+ !'.' <IntegerLiteral>
  end


end
